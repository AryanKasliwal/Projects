functions:
class Node { 
    public:
    int data; 
    Node* next; 
    Node* prev; 
}; 

void insertAfter(Node* prev_node, int new_data) { 
    
    if (prev_node == NULL){ 
        return; 
    } 
    Node* new_node = new Node();
    new_node->data = new_data; 
    new_node->next = prev_node->next; 
    prev_node->next = new_node; 
    new_node->prev = prev_node; 
    if (new_node->next != NULL){
        new_node->next->prev = new_node;
    } 
}

void append(Node** head_ref, int new_data){ 
    
    Node* new_node = new Node(); 
    Node* last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;
    if (*head_ref == NULL){ 
        new_node->prev = NULL; 
        *head_ref = new_node; 
        return; 
    } 
    else{
        while (last->next != NULL){
            last = last->next;
        }  
    }
    last->next = new_node;
    new_node->prev = last; 
 
    return; 
} 


main:

int n;
    cin >> n;
    int x = 0;
    Node *head = NULL;
    append(&head, 0);
    append(&head, n+1);
    for (int i = 0; i < n; i++){
        cin >> x;
        int largest_small_num, smallest_large_num;
        Node *last = head;
        while (x > last->data){
            last = last->next;
        }
        if (last->prev == NULL){
            largest_small_num = last->data;
        }
        else{
            largest_small_num = last->prev->data;
        }
        insertAfter(last->prev, x);-
        smallest_large_num = last->data;
        cout << largest_small_num << " " << smallest_large_num << '\n';
    }